synonyms:
* use **drop** for drop message, drop channel, (drop user?)
    * semantics: local removal of data
    * in the case of message (and user), option to not sync related data again
    * if drop user: blockUser is equivalent with drop user + persist removal/do-not-sync
* antonym of drop: **restore()**
    * restoreHashes, restoreChannel, restoreUser
    * restoreHashes(hashes, { request: bool })
* automated history cleaning mechanism (client-side)
    1. msgs := getChat(ch, {olderThan: xxx})
    2. dropMany(getHashes(msgs), { persist: false })

# protocol related
initialize()
* for each new peer we get in contact with (?):
    * requestChannelList
    * for each joined channel: 
        * requestChannelState(channel)
        * requestChannelTimeRange()
*  for each joined channel: 
    * requestChannelState(channel)
    * requestChannelTimeRange()
* for each channel we leave:
    * cancel request (ctr, left-channel)
    * cancel request (channel state, left-channel)

# post/* production
postText(msg, channel=currentFocus)
postTextEmote(msg, channel=currentFocus) // post/text that starts with /me
setTopic(text, channel=currentFocus)
deleteSingle(hash)
deleteMany([hash])
join(channel)
leave(channel)
forgetMe()

# moderation
* hideUser(pubkey)
* unhideUser(pubkey)
* dropUser(pubkey)
* restoreUser(pubkey)
* blockUser(pubkey)
* unblockUser(pubkey)
* dropSingle(hash, persist=bool)
* dropMany([hashes], persist=bool)
* restoreHash(hash)

# storage management
<!-- alternative to `remove`: `drop`; dropSingle(), dropMany() -->
* dropSingle(hash)
* dropMany([hash])
* restoreSingle
* restoreMany
* forgetMe()
* dropUser(pubkey)
* restoreUser
* dropChannel(channel)
* (restoreChannel?)
* storageSetMaxMessageCount(count)
* storageSetOldestMessage(maxTTL)
* storageChannelSetOldestMessage(channel, maxTTL)
* savePost(hash) -- mark post as "don't prune" but still delete if delete request comes in

# post/text and text facilities
// TODO (2023-07-18): experiment with hash-based fetching, but bias effort towards ts-based
getChat(channel, 
    { tsOlderThan: defaultStart, tsNewerThan: defaultEnd, 
    /*hashOlderThan: oldestHash: hash, hashNewerThan: newestHash,*/
    limit=defaultLimit })
requestChatMessage(channel, {options}
setStatusMessage(channel, message)
_{paginate(channel, {startHash, direction[historyBack,historyForward], limit, pageSize, linewidth})}_

# channel facilities
focusChannel(channel)
forgetChannel(channel)
join(channel)
leave(channel)

# message events
- chat-message (channel, hash, postJson)
- status-message
- name-change (post/info: key)
- new-channel
- topic
- delete / message-removed
- join
- leave
- update (generic)
- peer-added
- peer-dropped
